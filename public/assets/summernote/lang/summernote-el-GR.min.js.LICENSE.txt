/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.dialogsInBody = this.options.dialogsInBody && !this.options.airMode;
    this.options.toolbar = this.options.toolbar && $('<div>').addClass('note-toolbar').append(this.options.toolbar).remove().html();
    this.options.button = this.options.button && $('<button>').addClass('note-btn').append(this.options.button).remove().html();

    this.$editor = this.options.dialogsInBody
      ? $('<div>').addClass('note-editor note-frame-container').appendTo('body')
      : $('<div>').addClass('note-editor').appendTo(this.$element);

    this.$editable = this.options.airMode
      ? $('<div>').addClass('note-editable panel-body').appendTo(this.$editor)
      : $('<textarea>').addClass('note-editable').appendTo(this.$editable);

    this.$editor.append(this.options.toolbar);

    this.$fontname = this.options.fontNames && $('<select>').addClass('note-fontname').appendTo(this.$editor);
    this.$fontsize = this.options.fontSizes && $('<select>').addClass('note-fontsize').appendTo(this.$editor);
    this.$color = this.options.colors && $('<input>').addClass('note-colorpicker').appendTo(this.$editor);
    this.$bold = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-font-weight-button note-bold').appendTo(this.$editor);
    this.$italic = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-font-style-button note-italic').appendTo(this.$editor);
    this.$underline = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-font-decoration-button note-underline').appendTo(this.$editor);
    this.$strikethrough = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-font-decoration-button note-strikethrough').appendTo(this.$editor);
    this.$superscript = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-superscript').appendTo(this.$editor);
    this.$subscript = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-subscript').appendTo(this.$editor);
    this.$paragraph = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-paragraph').appendTo(this.$editor);
    this.$hr = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-horizontal-rule').appendTo(this.$editor);
    this.$link = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-link').appendTo(this.$editor);
    this.$unlink = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-unlink').appendTo(this.$editor);
    this.$image = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-image').appendTo(this.$editor);
    this.$video = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-video').appendTo(this.$editor);
    this.$file = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-file').appendTo(this.$editor);
    this.$table = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-table').appendTo(this.$editor);
    this.$ul = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-unordered-list').appendTo(this.$editor);
    this.$ol = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-ordered-list').appendTo(this.$editor);
    this.$redo = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-redo').appendTo(this.$editor);
    this.$undo = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-undo').appendTo(this.$editor);
    this.$help = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-help').appendTo(this.$editor);
    this.$fullscreen = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-fullscreen').appendTo(this.$editor);
    this.$air = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-air').appendTo(this.$editor);
    this.$maximize = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-maximize').appendTo(this.$editor);
    this.$codeview = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-codeview').appendTo(this.$editor);
    this.$search = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-search').appendTo(this.$editor);
    this.$view = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-view').appendTo(this.$editor);

    this.$fontname.append('<option value="">' + this.lang['fontname'] + '</option>');
    this.$fontsize.append('<option value="">' + this.lang['fontsize'] + '</option>');
    this.$color.spectrum({
      preferredFormat: 'hex'
    });

    this.$editable.on('focus', $.proxy(this.onFocus, this));
    this.$editable.on('blur', $.proxy(this.onBlur, this));

    this.initEvents();
    this.initPopover();
    this.initFontSize();
    this.initFontName();
    this.initColorPicker();
    this.initButtons();
    this.initDialogs();
    this.initAirMode();
    this.initFullscreenMode();
    this.initCodeviewMode();
    this.initSearchMode();
    this.initViewMode();

    if (this.options.height) {
      this.setHeight(this.options.height);
    }

    if (this.options.width) {
      this.setWidth(this.options.width);
    }

    if (this.options.focus) {
      this.focus();
    }

    if (this.options.airMode) {
      this.airMode();
    }

    if (this.options.dialogsInBody) {
      this.dialogsInBody();
    }

    if (this.options.codeviewIframe) {
      this.codeviewIframe();
    }

    if (this.options.minHeight) {
      this.setMinHeight(this.options.minHeight);
    }

    if (this.options.maxHeight) {
      this.setMaxHeight(this.options.maxHeight);
    }

    if (this.options.disableEnterKey) {
      this.disableEnterKey();
    }

    if (this.options.popover) {
      this.popover();
    }

    if (this.options.disableDragAndDrop) {
      this.disableDragAndDrop();
    }

    if (this.options.focusOnLoad) {
      this.focusOnLoad();
    }

    if (this.options.focusOnMouseover) {
      this.focusOnMouseover();
    }

    if (this.options.toolbarContainer) {
      this.toolbarContainer();
    }

    if (this.options.toolbarHideTag) {
      this.toolbarHideTag();
    }

    if (this.options.disableGutter) {
      this.disableGutter();
    }

    if (this.options.focusCallback) {
      this.focusCallback();
    }

    if (this.options.blurCallback) {
      this.blurCallback();
    }

    if (this.options.onImageUpload) {
      this.onImageUpload();
    }

    if (this.options.onMediaDelete) {
      this.onMediaDelete();
    }

    if (this.options.onPaste) {
      this.onPaste();
    }

    if (this.options.onKeyup) {
      this.onKeyup();
    }

    if (this.options.onKeydown) {
      this.onKeydown();
    }

    if (this.options.onFocusin) {
      this.onFocusin();
    }

    if (this.options.onFocusout) {
      this.onFocusout();
    }

    if (this.options.onDialogShown) {
      this.onDialogShown();
    }

    if (this.options.onDialogHidden) {
      this.onDialogHidden();
    }

    if (this.options.onInit) {
      this.onInit();
    }

    if (this.options.onChange) {
      this.onChange();
    }

    if (this.options.onBlur) {
      this.onBlur();
    }

    if (this.options.onContentReady) {
      this.onContentReady();
    }

    if (this.options.onEnter) {
      this.onEnter();
    }

    if (this.options.onImageLinkInsert) {
      this.onImageLinkInsert();
    }

    if (this.options.onVideoLinkInsert) {
      this.onVideoLinkInsert();
    }

    if (this.options.onFileUpload) {
      this.onFileUpload();
    }

    if (this.options.onFileLinkInsert) {
      this.onFileLinkInsert();
    }

    if (this.options.onFileRemove) {
      this.onFileRemove();
    }

    if (this.options.onFileDownload) {
      this.onFileDownload();
    }

    if (this.options.onLinkClick) {
      this.onLinkClick();
    }

    if (this.options.onLinkRemove) {
      this.onLinkRemove();
    }

    if (this.options.onMediaInsert) {
      this.onMediaInsert();
    }

    if (this.options.onMediaRemove) {
      this.onMediaRemove();
    }

    if (this.options.onMediaDownload) {
      this.onMediaDownload();
    }

    if (this.options.onMediaConvert) {
      this.onMediaConvert();
    }

    if (this.options.onMediaConvertError) {
      this.onMediaConvertError();
    }

    if (this.options.onMediaConvertSuccess) {
      this.onMediaConvertSuccess();
    }

    if (this.options.onTableCreated) {
      this.onTableCreated
