/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.dialogsInBody = this.options.dialogsInBody && !this.options.airMode;
    this.options.toolbar = this.options.toolbar && $('<div/>').addClass('note-toolbar').append(this.options.toolbar).html();
    this.options.button = this.options.button && $('<button/>').addClass('note-btn').append(this.options.button).html();

    this.$editor = this.options.dialogsInBody
      ? $('<div/>').addClass('note-editor note-frame-container').appendTo('body')
      : $('<div/>').addClass('note-editor').appendTo(this.$element);

    this.$editor.append(this.options.toolbar);
    this.$editor.append(this.options.button);

    this.$editable = this.options.airMode
      ? $('<textarea/>').addClass('note-airmode').appendTo(this.$element)
      : $('<div/>').addClass('note-editable').appendTo(this.$editor);

    this.$editable.on('compositionstart', $.proxy(this.onCompositionStart, this));
    this.$editable.on('compositionend', $.proxy(this.onCompositionEnd, this));

    this.$editable.on('focus', $.proxy(this.onFocus, this));
    this.$editable.on('blur', $.proxy(this.onBlur, this));

    this.$editable.on('input propertychange', $.proxy(this.onInput, this));
    this.$editable.on('scroll', $.proxy(this.onScroll, this));

    this.$editable.on('mousedown', function (event) {
      if (event.target.tagName === 'IMG') {
        return;
      }
      event.stopPropagation();
    });

    this.$editable.on('mouseup', $.proxy(this.onMouseUp, this));

    this.$editable.on('paste', $.proxy(this.onPaste, this));

    this.$editable.on('drop', $.proxy(this.onDrop, this));

    this.$editable.on('dragover', function (event) {
      event.originalEvent.dataTransfer.dropEffect = 'copy';
      event.preventDefault();
    });

    this.$editable.on('contextmenu', $.proxy(this.onContextMenu, this));

    this.$editable.on('keydown', $.proxy(this.onKeyDown, this));

    this.$editable.on('keyup', $.proxy(this.onKeyUp, this));

    this.$editable.on('focusin', $.proxy(this.onFocusEditor, this));

    this.$editable.on('focusout', $.proxy(this.onBlurEditor, this));

    this.$editable.on('dblclick', $.proxy(this.onDblClick, this));

    this.$editable.on('click', $.proxy(this.onClick, this));

    this.$editable.on('mousemove', $.proxy(this.onMouseMove, this));

    this.$editable.on('mouseleave', $.proxy(this.onMouseLeave, this));

    this.$editable.on('touchstart', $.proxy(this.onTouchStart, this));

    this.$editable.on('touchmove', $.proxy(this.onTouchMove, this));

    this.$editable.on('touchend', $.proxy(this.onTouchEnd, this));

    this.$editable.on('touchcancel', $.proxy(this.onTouchCancel, this));

    this.$editable.on('cut', $.proxy(this.onCut, this));

    this.$editable.on('copy', $.proxy(this.onCopy, this));

    this.$editable.on('paste', $.proxy(this.onPaste, this));

    this.$editable.on('beforedeactivate', $.proxy(this.onBeforeDeactivate, this));

    this.$editable.on('activate', $.proxy(this.onActivate, this));

    this.$editable.on('deactivate', $.proxy(this.onDeactivate, this));

    this.$editable.on('beforeinput', $.proxy(this.onBeforeInput, this));

    this.$editable.on('input', $.proxy(this.onInput, this));

    this.$editable.on('DOMNodeRemoved', $.proxy(this.onDOMNodeRemoved, this));

    this.$editable.on('DOMNodeInserted', $.proxy(this.onDOMNodeInserted, this));

    this.$editable.on('DOMSubtreeModified', $.proxy(this.onDOMSubtreeModified, this));

    this.$editable.on('load', $.proxy(this.onLoad, this));

    this.$editable.on('error', $.proxy(this.onError, this));

    this.$editable.on('focus', $.proxy(this.onFocusEditor, this));

    this.$editable.on('blur', $.proxy(this.onBlurEditor, this));

    this.$editable.on('change', $.proxy(this.onChange, this));

    this.$editable.on('select', $.proxy(this.onSelect, this));

    this.$editable.on('drop', $.proxy(this.onDrop, this));

    this.$editable.on('dragover', function (event) {
      event.originalEvent.dataTransfer.dropEffect = 'copy';
      event.preventDefault();
    });

    this.$editable.on('contextmenu', $.proxy(this.onContextMenu, this));

    this.$editable.on('keydown', $.proxy(this.onKeyDown, this));

    this.$editable.on('keyup', $.proxy(this.onKeyUp, this));

    this.$editable.on('focusin', $.proxy(this.onFocusEditor, this));

    this.$editable.on('focusout', $.proxy(this.onBlurEditor, this));

    this.$editable.on('dblclick', $.proxy(this.onDblClick, this));

    this.$editable.on('click', $.proxy(this.onClick, this));

    this.$editable.on('mousemove', $.proxy(this.onMouseMove, this));

    this.$editable.on('mouseleave', $.proxy(this.onMouseLeave, this));

    this.$editable.on('touchstart', $.proxy(this.onTouchStart, this));

    this.$editable.on('touchmove', $.proxy(this.onTouchMove, this));

    this.$editable.on('touchend', $.proxy(this.onTouchEnd, this));

    this.$editable.on('touchcancel', $.proxy(this.onTouchCancel, this));

    this.$editable.on('cut', $.proxy(this.onCut, this));

    this.$editable.on('copy', $.proxy(this.onCopy, this));

    this.$editable.on('paste', $.proxy(this.onPaste, this));

    this.$editable.on('beforedeactivate', $.proxy(this.onBeforeDeactivate, this));

    this.$editable.on('activate', $.proxy(this.onActivate, this));

    this.$editable.on('deactivate', $.proxy(this.onDeactivate, this));

    this.$editable.on('beforeinput', $.proxy(this.onBeforeInput, this));

    this.$editable.on('input', $.proxy(this.onInput, this));

    this.$editable.on('DOMNodeRemoved', $.proxy(this.onDOMNodeRemoved, this));

    this.$editable.on('DOMNodeInserted', $.proxy(this.onDOMNodeInserted, this));

    this.$editable.on('DOMSubtreeModified', $.proxy(this.onDOMSubtreeModified, this));

    this.$editable.on('load', $.proxy(this.onLoad, this));

    this.$editable.on('error', $.proxy(this.onError, this));

    this.$editable.on('focus', $.proxy(this.onFocusEditor, this));

    this.$editable.on('blur', $.proxy(this.onBlurEditor, this));

    this.$editable.on('change', $.proxy(this.onChange, this));

    this.$editable.on('select', $.proxy(this.onSelect, this));

    this.$editable.on('drop', $.proxy(this.onDrop, this));

    this.$editable.on('dragover', function (event) {
      event.originalEvent.dataTransfer.dropEffect = 'copy';
      event.preventDefault();
    });

    this.$editable.on('contextmenu', $.proxy(this.onContextMenu, this));

    this.$editable.on('keydown', $.proxy(this.onKeyDown, this));

    this.$editable.on('keyup', $.proxy(this.onKeyUp, this));

    this.$editable.on('focusin', $.proxy(this.onFocusEditor, this));

    this.$editable.on('focusout', $.proxy(this.onBlurEditor, this));

    this.$editable.on('dblclick', $.proxy(this.onDblClick, this));

    this.$editable.on('click', $.proxy(this.onClick, this));

    this.$editable.on('mousemove', $.proxy(this.onMouseMove, this));

    this.$editable.on('mouseleave', $.proxy(this.onMouseLeave, this));

    this.$editable.on('touchstart', $.proxy(this.onTouchStart, this));

    this.$editable.on('touchmove', $.proxy(this.onTouchMove, this));

    this.$editable.on('touchend', $.proxy(this.onTouchEnd, this));

    this.$editable.on('touchcancel', $.proxy(this.onTouchCancel, this));

    this.$editable.on('cut', $.proxy(this.onCut, this));

    this.$editable.on('copy', $.proxy(this.onCopy, this));

    this.$editable.on('paste', $.proxy(this.onPaste, this));

    this.$editable.on('beforedeactivate', $.proxy(this.onBeforeDeactivate, this));

    this.$editable.on('activate', $.proxy(this.onActivate, this));

    this.$editable.on('deactivate', $.proxy(this.onDeactivate, this));

    this.$editable.on('beforeinput', $.proxy(this.onBeforeInput, this));

    this.$editable.on('input', $.proxy(this.onInput, this));

    this.$editable.on('DOMNodeRemoved', $.proxy(this.onDOMNodeRemoved, this));

    this.$editable.on('DOMNodeInserted', $.proxy(this.onDOMNodeInserted, this));

    this.$editable.on('DOMSubtreeModified', $.proxy(this.onDOMSubtreeModified, this));

    this.$editable.on('load', $.proxy(this.onLoad, this));

    this.$editable.on('error', $.proxy(this.
