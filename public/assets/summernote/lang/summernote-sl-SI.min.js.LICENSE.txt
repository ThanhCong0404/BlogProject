/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.toolbar = this.options.toolbar && $('<div>').addClass('note-toolbar').append(this.options.toolbar).remove().html();
    this.options.dialogsInBody = this.options.dialogsInBody || this.options.airMode;

    this.$editor = this.options.airMode
      ? this.$element
      : this.$element.is('textarea')
        ? this.$element
        : $('<textarea>').appendTo(this.$element);

    this.$editor.val(this.$element.val() || '');

    this.id = 'summernote';
    this.options.height = this.options.height || this.$editor[0].scrollHeight;
    this.options.width = this.options.width || this.$element.outerWidth();

    this.initLayout();
    this.initEvents();
    this.initModules();

    if (this.options.focus) {
      this.focus();
    }
  };

  // initialize layout
  Summernote.prototype.initLayout = function () {
    this.layoutInfo = {
      toolbar: this.options.toolbar,
      editor: this.$editor,
      footer: this.options.airMode ? null : $('<div>').addClass('note-footer').appendTo(this.$element),
      codable: this.options.codable,
      popover: null,
      airPopover: null
    };

    if (this.options.dialogsInBody) {
      this.layoutInfo.dialogs = $('<div>').addClass('note-dialogs').appendTo('body');
    } else {
      this.layoutInfo.dialogs = $('<div>').addClass('note-dialogs').appendTo(this.$element);
    }

    if (this.options.airMode) {
      this.layoutInfo.airPopover = $('<div>').addClass('note-air-popover').appendTo(this.$element);
    }

    this.layoutInfo.popover = $('<div>').addClass('note-popover').appendTo(this.$element);

    this.createImageEditor();
  };

  // initialize events
  Summernote.prototype.initEvents = function () {
    this.$element.on('summernote.init', $.proxy(function () {
      this.options.callback && this.options.callback(this);
    }, this));

    this.$editor.on({
      'focus': $.proxy(function () {
        this.options.focusCallback && this.options.focusCallback(this);
      }, this),
      'blur': $.proxy(function () {
        this.options.blurCallback && this.options.blurCallback(this);
      }, this)
    });

    this.$element.on('summernote.change', $.proxy(function () {
      this.options.changeCallback && this.options.changeCallback(this);
    }, this));

    this.$element.on('summernote.keyup', $.proxy(function (e) {
      this.options.keyupCallback && this.options.keyupCallback(this, e);
    }, this));

    this.$element.on('summernote.paste', $.proxy(function (e) {
      this.options.pasteCallback && this.options.pasteCallback(this, e);
    }, this));

    this.$element.on('summernote.blur', $.proxy(function (e) {
      this.options.blurCallback && this.options.blurCallback(this, e);
    }, this));

    this.$element.on('summernote.codeview', $.proxy(function (e) {
      this.options.codeviewCallback && this.options.codeviewCallback(this, e);
    }, this));

    this.$element.on('summernote.airview', $.proxy(function (e) {
      this.options.airviewCallback && this.options.airviewCallback(this, e);
    }, this));

    this.$element.on('summernote.fullscreen.enter', $.proxy(function (e) {
      this.options.fullscreenEnterCallback && this.options.fullscreenEnterCallback(this, e);
    }, this));

    this.$element.on('summernote.fullscreen.exit', $.proxy(function (e) {
      this.options.fullscreenExitCallback && this.options.fullscreenExitCallback(this, e);
    }, this));

    this.$element.on('summernote.fontsize.change', $.proxy(function (e, fontSize) {
      this.options.fontsizeCallback && this.options.fontsizeCallback(this, fontSize);
    }, this));

    this.$element.on('summernote.fontname.change', $.proxy(function (e, fontName) {
      this.options.fontnameCallback && this.options.fontnameCallback(this, fontName);
    }, this));

    this.$element.on('summernote.color.change', $.proxy(function (e, color) {
      this.options.colorCallback && this.options.colorCallback(this, color);
    }, this));

    this.$element.on('summernote.paragraph.style.change', $.proxy(function (e, style) {
      this.options.paragraphStyleCallback && this.options.paragraphStyleCallback(this, style);
    }, this));

    this.$element.on('summernote.paragraph.format.change', $.proxy(function (e, format) {
      this.options.paragraphFormatCallback && this.options.paragraphFormatCallback(this, format);
    }, this));

    this.$element.on('summernote.image.upload.success', $.proxy(function (e, data) {
      this.options.imageUploadSuccessCallback && this.options.imageUploadSuccessCallback(this, data);
    }, this));

    this.$element.on('summernote.image.upload.error', $.proxy(function (e, xhr, textStatus, errorThrown) {
      this.options.imageUploadErrorCallback && this.options.imageUploadErrorCallback(this, xhr, textStatus, errorThrown);
    }, this));

    this.$element.on('summernote.image.upload.cancel', $.proxy(function (e) {
      this.options.imageUploadCancelCallback && this.options.imageUploadCancelCallback(this);
    }, this));

    this.$element.on('summernote.image.link.change', $.proxy(function (e, link) {
      this.options.imageLinkCallback && this.options.imageLinkCallback(this, link);
    }, this));

    this.$element.on('summernote.video.link.change', $.proxy(function (e, link) {
      this.options.videoLinkCallback && this.options.videoLinkCallback(this, link);
    }, this));

    this.$element.on('summernote.link.change', $.proxy(function (e, link) {
      this.options.linkCallback && this.options.linkCallback(this, link);
    }, this));

    this.$element.on('summernote.table.insert.row', $.proxy(function (e) {
      this.options.tableInsertRowCallback && this.options.tableInsertRowCallback(this);
    }, this));

    this.$element.on('summernote.table.insert.column', $.proxy(function (e) {
      this.options.tableInsertColumnCallback && this.options.tableInsertColumnCallback(this);
    }, this));

    this.$element.on('summernote.table.delete.row', $.proxy(function (e) {
      this.options.tableDeleteRowCallback && this.options.tableDeleteRowCallback(this);
    }, this));

    this.$element.on('summernote.table.delete.column', $.proxy(function (e) {
      this.options.tableDeleteColumnCallback && this.options.tableDeleteColumnCallback(this);
    }, this));

    this.$element.on('summernote.table.merge.cell', $.proxy(function (e) {
      this.options.tableMergeCellCallback && this.options.tableMergeCellCallback(this);
    }, this));

    this.$element.on('summernote.table.split.cell', $.proxy(function (e) {
      this.options.tableSplitCellCallback && this.options.tableSplitCellCallback(this);
    }, this));

    this.$element.on('summernote.table.remove', $.proxy(function (e) {
      this.options.tableRemoveCallback && this.options.tableRemoveCallback(this);
    }, this));

    this.$element.on('summernote.table.cell.selected', $.proxy(function (e, cell) {
      this.options.tableCellSelectedCallback && this.options.tableCellSelectedCallback(this, cell);
    }, this));

    this.$element.on('summernote.table.cell.deselected', $.proxy(function (e, cell) {
      this.options.tableCellDeselectedCallback && this.options.tableCellDeselectedCallback(this, cell);
    }, this));

    this.$element.on('summernote.table.cell.updated', $.proxy(function (e, cell) {
      this.options.tableCellUpdatedCallback && this.options.tableCellUpdatedCallback(this, cell);
    }, this));

    this.$element.on('summernote.table.cell.updated.range', $.proxy(function (e, cellRange) {
      this.options.tableCellUpdatedRangeCallback && this.options.tableCellUpdatedRangeCallback(this, cellRange);
    }, this));

    this.$element.on('summernote.table.cell.selected.range', $.proxy(function (e, cellRange) {
      this.options.tableCellSelectedRangeCallback && this.options.tableCellSelectedRangeCallback(this, cellRange);
    }, this));

    this.$element.on('summernote.table.cell.deselected.range', $.proxy(function (e, cellRange) {
      this.options.tableCellDeselectedRangeCallback && this.options.tableCellDeselectedRangeCallback(this, cellRange);
    }, this));

    this.$element.on('summernote.table.cell.updated.range.all', $.proxy(function (e, cellRange) {
      this.options.tableCellUpdatedRangeAllCallback && this.options.tableCellUpdatedRangeAllCallback(this, cellRange);
    }, this));

    this.$element.on('summernote.table.cell.selected.range.all', $.proxy(function (e, cellRange) {
      this.options.tableCellSelectedRangeAllCallback && this.options.tableCellSelectedRangeAllCallback(this, cellRange);
    }, this));

    this.$element.on('summernote.table.cell.deselected.range.all', $.proxy(function (e, cellRange) {
      this.options.tableCellDeselectedRangeAllCallback && this.options.tableCellDeselectedRangeAllCallback(this, cellRange);
    }, this));

    this.$element.on('summernote.table.cell.updated.range.all.merge', $.proxy(function (e, cellRange) {
      this.options.tableCellUpdatedRangeAllMergeCallback && this.options.tableCellUpdatedRangeAllMergeCallback(this, cellRange);
    }, this));

    this.$element.on('summernote.table.cell.selected.range.all.merge', $.proxy(function (e,
