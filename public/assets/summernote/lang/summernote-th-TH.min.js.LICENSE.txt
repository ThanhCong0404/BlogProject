/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.toolbar = this.options.toolbar && $('<div>').addClass('note-toolbar').append(this.options.toolbar).remove().html();
    this.options.dialogsInBody = this.options.dialogsInBody || this.options.airMode;

    this.$editor = this.options.airMode
      ? this.$element
      : this.$element.is('textarea')
        ? this.$element
        : $('<textarea>').appendTo(this.$element);

    this.$editor.val(this.$element.val() || '');

    this.id = 'summernote-' + (++$.summernote.counter);
    this.$container = $('<div>').addClass('note-container').attr('id', this.id).appendTo(this.$element);
    this.$editor.addClass('note-editable').attr('id', this.id + '-editor').appendTo(this.$container);

    this.fontSize = this.options.fontSize || ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '36', '48', '56', '72'];
    this.fontNames = this.options.fontNames || ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Impact', 'Lucida Console', 'Lucida Sans Unicode', 'Tahoma', 'Times New Roman', 'Verdana'];
    this.fontNamesExt = this.options.fontNamesExt || [];
    this.fontNames = this.fontNames.concat(this.fontNamesExt);

    this.initLayout();
    this.initEvents();
    this.initPopover();
    this.initCodeview();
    this.initDialog();

    if (this.options.focus) {
      this.focus();
    }
  };

  // initialize layout
  Summernote.prototype.initLayout = function () {
    this.layoutInfo = {
      toolbar: this.options.toolbar,
      dialogsInBody: this.options.dialogsInBody,
      airMode: this.options.airMode,
      codemirror: this.options.codemirror,
      popover: this.options.popover,
      disableDragAndDrop: this.options.disableDragAndDrop,
      focus: this.options.focus,
      height: this.options.height,
      minHeight: this.options.minHeight,
      maxHeight: this.options.maxHeight,
      focusBorder: this.options.focusBorder,
      dialogWidth: this.options.dialogWidth,
      dialogHeight: this.options.dialogHeight,
      airFrameClass: this.options.airFrameClass,
      disableResize: this.options.disableResize,
      toolbarContainer: this.options.toolbarContainer,
      buttonSpacing: this.options.buttonSpacing,
      rtl: this.options.rtl,
      placeholder: this.options.placeholder,
      hint: this.options.hint,
      hintOptions: this.options.hintOptions,
      hintLimit: this.options.hintLimit,
      hintTimeout: this.options.hintTimeout,
      hintInterval: this.options.hintInterval,
      callbacks: this.options.callbacks
    };

    this.containerHeight = this.options.height;
    this.minContainerHeight = this.options.minHeight;
    this.maxContainerHeight = this.options.maxHeight;

    this.$container.addClass('note-' + this.layoutInfo.airMode + '-container');

    if (this.layoutInfo.toolbar) {
      this.$toolbar = $('<div>').addClass('note-toolbar').appendTo(this.$container);
    }

    if (this.layoutInfo.dialogsInBody) {
      this.$dialogs = $('<div>').addClass('note-dialogs').appendTo('body');
    }

    if (this.layoutInfo.airMode) {
      this.$editor.addClass('note-frame');
    }

    if (this.layoutInfo.codemirror) {
      this.$editor.addClass('note-codemirror');
    }

    if (this.layoutInfo.popover) {
      this.$editor.addClass('note-popover');
    }

    if (this.layoutInfo.disableDragAndDrop) {
      this.$editor.attr('draggable', false);
    }

    if (this.layoutInfo.focusBorder) {
      this.$editor.on('focus', $.proxy(this.focusBorder, this));
    }

    if (this.layoutInfo.dialogWidth) {
      this.dialogWidth = this.layoutInfo.dialogWidth;
    }

    if (this.layoutInfo.dialogHeight) {
      this.dialogHeight = this.layoutInfo.dialogHeight;
    }

    if (this.layoutInfo.airFrameClass) {
      this.$editor.addClass(this.layoutInfo.airFrameClass);
    }

    if (this.layoutInfo.disableResize) {
      this.$editor.addClass('note-resizable-off');
    }

    if (this.layoutInfo.toolbarContainer) {
      this.$toolbarContainer = $(this.layoutInfo.toolbarContainer);
    }

    if (this.layoutInfo.buttonSpacing) {
      this.$toolbar.children().not('.note-group').children().css('margin-left', this.layoutInfo.buttonSpacing);
    }

    if (this.layoutInfo.rtl) {
      this.$container.addClass('note-rtl');
    }

    if (this.layoutInfo.placeholder) {
      this.$editor.attr('placeholder', this.layoutInfo.placeholder);
    }

    if (this.layoutInfo.hint) {
      this.hint = new Hint(this, this.layoutInfo.hintOptions, this.layoutInfo.hintLimit, this.layoutInfo.hintTimeout, this.layoutInfo.hintInterval);
    }

    if (this.layoutInfo.callbacks) {
      this.invokeCallback('onInit', [this]);
    }
  };

  // initialize events
  Summernote.prototype.initEvents = function () {
    var $window = $(window);
    var $document = $(document);

    this.checkContainerHeight();

    $window.on('resize', $.proxy(this.checkContainerHeight, this));

    if (this.layoutInfo.disableResize) {
      $document.on('mousemove.note', $.proxy(this.onDocumentMouseMove, this));
    }

    this.$editor.on('scroll', $.proxy(this.onEditorScroll, this));

    this.$editor.on('input propertychange', $.proxy(this.onInput, this));

    this.$editor.on('focus', $.proxy(this.onFocus, this));

    this.$editor.on('blur', $.proxy(this.onBlur, this));

    this.$editor.on('mousedown', $.proxy(this.onEditorMouseDown, this));

    this.$editor.on('mouseup', $.proxy(this.onEditorMouseUp, this));

    this.$editor.on('mousemove', $.proxy(this.onEditorMouseMove, this));

    this.$editor.on('paste', $.proxy(this.onPaste, this));

    this.$editor.on('drop', $.proxy(this.onDrop, this));

    this.$editor.on('dragover', $.proxy(this.onDragOver, this));

    this.$editor.on('dragenter', $.proxy(this.onDragEnter, this));

    this.$editor.on('dragleave', $.proxy(this.onDragLeave, this));

    this.$container.on('mousedown', $.proxy(this.onContainerMouseDown, this));

    this.$container.on('mouseup', $.proxy(this.onContainerMouseUp, this));

    this.$container.on('mousemove', $.proxy(this.onContainerMouseMove, this));

    this.$container.on('click', $.proxy(this.onContainerClick, this));

    this.$container.on('dblclick', $.proxy(this.onContainerDblClick, this));

    this.$container.on('contextmenu', $.proxy(this.onContainerContextMenu, this));

    this.$container.on('scroll', $.proxy(this.onContainerScroll, this));

    this.$container.on('copy cut paste', $.proxy(this.onContainerCopyCutPaste, this));

    this.$container.on('keydown', $.proxy(this.onContainerKeyDown, this));

    this.$container.on('keypress', $.proxy(this.onContainerKeyPress, this));

    this.$container.on('keyup', $.proxy(this.onContainerKeyUp, this));

    this.$container.on('focus', $.proxy(this.onContainerFocus, this));

    this.$container.on('blur', $.proxy(this.onContainerBlur, this));

    this.$container.on('change', $.proxy(this.onContainerChange, this));

    this.$container.on('selectstart', $.proxy(this.onContainerSelectStart, this));

    this.$container.on('dragstart', $.proxy(this.onContainerDragStart, this));

    this.$container.on('dragend', $.proxy(this.onContainerDragEnd, this));

    this.$container.on('dragenter', $.proxy(this.onContainerDragEnter, this));

    this.$container.on('dragleave', $.proxy(this.onContainerDragLeave, this));

    this.$container.on('dragover', $.proxy(this.onContainerDragOver, this));

    this.$container.on('drop', $.proxy(this.onContainerDrop, this));

    this.$container.on('scroll', $.proxy(this.onContainerScroll, this));

    this.$container.on('mousewheel DOMMouseScroll', $.proxy(this.onContainerMouseWheel, this));

    this.$container.on('touchstart touchmove touchend touchcancel', $.proxy(this.onContainerTouch, this));

    this.$container.on('focusin', $.proxy(this.onContainerFocusIn, this));

    this.$container.on('focusout', $.proxy(this.onContainerFocusOut, this));

    this.$container.on('mousedown', $.proxy(this.onContainerMousedown, this));

    this.$container.on('mouseup', $.proxy(this.onContainerMouseup, this));

    this.$container.on('mousemove', $.proxy(this.onContainerMousemove, this));

    this.$container.on('mouseover', $.proxy(this.onContainerMouseover, this));

    this.$container.on('mouseout', $.proxy(this.onContainerMouseout, this));

    this.$container.on('mouseenter', $.proxy(this.onContainerMouseenter, this));

    this.$container.on('mouseleave', $.proxy(this.onContainerMouseleave, this));

    this.$container.on('click dblclick', $.proxy(this.onContainerClickDblclick, this));

    this.$container.on('contextmenu', $.proxy(this.onContainerContextmenu, this));

    this.$container.on('selectstart dragstart dragend dragenter dragleave dragover
