/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = $.fn.summernote.lang[this.options.lang];
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.height = this.getRealHeight(this.options.height);
    this.$editor = this.$element.find('.note-editor');
    this.$editable = this.$editor.find('.note-editable');
    this.$editorParents = this.$editor.parent();
    this.$toolbar = this.$editorParents.find('.note-toolbar');
    this.$footer = this.$editorParents.find('.note-footer');
    this.$note = this.$editorParents.find('.note-frame');
    this.$dialogs = $();

    this.initEvents();
    this.initModules();
    this.initLayout();
    this.initState();
  };

  // initialize events
  Summernote.prototype.initEvents = function () {
    var self = this;

    this.$editable.on('scroll', function () {
      self.$editor.scrollTop(this.scrollTop);
    });

    this.$editor.on('scroll', function () {
      self.$editable.scrollTop(this.scrollTop);
    });

    this.$element.on('summernote.init', function () {
      self.options.onInit && self.options.onInit.call(self);
    });

    this.$element.on('summernote.change', function () {
      self.options.onChange && self.options.onChange.call(self);
    });

    this.$element.on('summernote.keyup', function () {
      self.options.onKeyup && self.options.onKeyup.call(self);
    });

    this.$element.on('summernote.keydown', function (e) {
      self.options.onKeydown && self.options.onKeydown.call(self, e);
    });

    this.$element.on('summernote.paste', function (e) {
      self.options.onPaste && self.options.onPaste.call(self, e);
    });

    this.$element.on('summernote.blur', function () {
      self.options.onBlur && self.options.onBlur.call(self);
    });

    this.$element.on('summernote.focus', function () {
      self.options.onFocus && self.options.onFocus.call(self);
    });

    this.$element.on('summernote.mouseup', function () {
      self.options.onMouseup && self.options.onMouseup.call(self);
    });

    this.$element.on('summernote.mousedown', function () {
      self.options.onMousedown && self.options.onMousedown.call(self);
    });

    this.$element.on('summernote.beforedestroy', function () {
      self.options.onBeforeDestroy && self.options.onBeforeDestroy.call(self);
    });

    this.$element.on('summernote.destroy', function () {
      self.options.onDestroy && self.options.onDestroy.call(self);
    });
  };

  // initialize modules
  Summernote.prototype.initModules = function () {
    this.modules = [];

    if (this.options.airMode) {
      this.modules.push(new AirMode(this));
    }

    if (this.options.dialogsInBody) {
      this.modules.push(new DialogsInBody(this));
    }

    if (this.options.toolbar) {
      this.modules.push(new Toolbar(this));
    }

    if (this.options.codeview) {
      this.modules.push(new Codeview(this));
    }

    if (this.options.popup) {
      this.modules.push(new Popup(this));
    }

    if (this.options.hint) {
      this.modules.push(new Hint(this));
    }

    if (this.options.table) {
      this.modules.push(new Table(this));
    }

    if (this.options.link) {
      this.modules.push(new Link(this));
    }

    if (this.options.airPopover) {
      this.modules.push(new AirPopover(this));
    }

    if (this.options.image) {
      this.modules.push(new Image(this));
    }

    if (this.options.video) {
      this.modules.push(new Video(this));
    }

    if (this.options.file) {
      this.modules.push(new File(this));
    }

    if (this.options.fullscreen) {
      this.modules.push(new Fullscreen(this));
    }

    if (this.options.font) {
      this.modules.push(new Font(this));
    }

    if (this.options.color) {
      this.modules.push(new Color(this));
    }

    if (this.options.paragraph) {
      this.modules.push(new Paragraph(this));
    }

    if (this.options.style) {
      this.modules.push(new Style(this));
    }

    if (this.options.undo) {
      this.modules.push(new Undo(this));
    }

    if (this.options.redo) {
      this.modules.push(new Redo(this));
    }

    if (this.options.help) {
      this.modules.push(new Help(this));
    }

    if (this.options.maxHeight) {
      this.modules.push(new MaxHeight(this));
    }

    if (this.options.focus) {
      this.modules.push(new Focus(this));
    }

    if (this.options.shortcuts) {
      this.modules.push(new Shortcuts(this));
    }

    if (this.options.copyright) {
      this.modules.push(new Copyright(this));
    }

    if (this.options.disabled) {
      this.modules.push(new Disabled(this));
    }

    if (this.options.readonly) {
      this.modules.push(new Readonly(this));
    }

    if (this.options.focus) {
      this.modules.push(new Focus(this));
    }

    if (this.options.placeholder) {
      this.modules.push(new Placeholder(this));
    }

    if (this.options.autofocus) {
      this.modules.push(new Autofocus(this));
    }

    if (this.options.onImageUpload) {
      this.modules.push(new OnImageUpload(this));
    }

    if (this.options.onImageUploadError) {
      this.modules.push(new OnImageUploadError(this));
    }

    if (this.options.onMediaDelete) {
      this.modules.push(new OnMediaDelete(this));
    }

    if (this.options.onPaste) {
      this.modules.push(new OnPaste(this));
    }

    if (this.options.onDialogShown) {
      this.modules.push(new OnDialogShown(this));
    }

    if (this.options.onDialogHidden) {
      this.modules.push(new OnDialogHidden(this));
    }

    if (this.options.onEnter) {
      this.modules.push(new OnEnter(this));
    }

    if (this.options.onKeydown) {
      this.modules.push(new OnKeydown(this));
    }

    if (this.options.onKeyup) {
      this.modules.push(new OnKeyup(this));
    }

    if (this.options.onBlur) {
      this.modules.push(new OnBlur(this));
    }

    if (this.options.onFocus) {
      this.modules.push(new OnFocus(this));
    }

    if (this.options.onImageLinkInsert) {
      this.modules.push(new OnImageLinkInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaDelete) {
      this.modules.push(new OnMediaDelete(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.onMediaInsert) {
      this.modules.push(new OnMediaInsert(this));
    }

    if (this.options.on
