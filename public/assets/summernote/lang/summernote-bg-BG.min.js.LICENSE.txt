/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.dialogsInBody = this.options.dialogsInBody && !this.options.airMode;
    this.options.toolbar = this.options.toolbar && $('<div>').addClass('note-toolbar').append(this.options.toolbar).remove().html();
    this.options.button = this.options.button && $('<button>').addClass('note-btn').append(this.options.button).remove().html();

    this.$editor = this.options.dialogsInBody
      ? $('<div>').addClass('note-editor note-frame-view').appendTo('body')
      : $('<div>').addClass('note-editor').appendTo(this.$element);

    this.$editable = this.options.airMode
      ? $('<div>').addClass('note-editable panel-body').appendTo(this.$editor)
      : $('<textarea>').addClass('note-editable').appendTo(this.$editable);

    this.$editor.append(this.options.toolbar || '');

    this.options.airMode && this.airMode();

    this.events();
  };

  // destroy
  Summernote.prototype.destroy = function () {
    this.isDestroyed = true;
    this.$element.removeData('summernote');
    this.$editor.remove();
  };

  // public methods
  Summernote.prototype.methods = {
    focus: function () {
      this.$editable.focus();
    },
    code: function () {
      return this.$editable.code();
    },
    html: function (html) {
      if (html) {
        this.$editable.html(html);
      } else {
        return this.$editable.html();
      }
    },
    disable: function () {
      this.$editable.prop('disabled', true);
    },
    enable: function () {
      this.$editable.prop('disabled', false);
    },
    reset: function () {
      this.$editable.val('');
    },
    pasteHTML: function (html) {
      this.$editable.summernote('pasteHTML', html);
    }
  };

  // private methods
  Summernote.prototype.events = function () {
    var self = this;

    this.$editable.on({
      'focus': function () {
        self.options.onFocus && self.options.onFocus.call(self.$editable[0]);
      },
      'blur': function () {
        self.options.onBlur && self.options.onBlur.call(self.$editable[0]);
      }
    });
  };

  Summernote.prototype.airMode = function () {
    this.$editable.attr('contenteditable', true);
    this.$editable.on('input propertychange', function () {
      self.options.onChange && self.options.onChange.call(self.$editable[0]);
    });
  };

  // add summernote method
  $.fn.summernote = function (option, value) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('summernote');
      var options = typeof option === 'object' && option;

      if (!data) {
        $this.data('summernote', (data = new Summernote(this, options)));
      }

      if (typeof option === 'string') {
        if (data[option]) {
          return data[option].apply(data, Array.prototype.slice.call(arguments, 1));
        } else {
          throw new Error('No such method: ' + option);
        }
      }
    });
  };

  // add summernote default options
  $.fn.summernote.defaults = {
    lang: 'en-US',
    dialogsInBody: false,
    airMode: false,
    toolbar: [
      ['style', ['bold', 'italic', 'underline', 'clear']],
      ['font', ['strikethrough', 'superscript', 'subscript']],
      ['fontsize', ['fontsize']],
      ['color', ['color']],
      ['para', ['ul', 'ol', 'paragraph']],
      ['height', ['height']],
      ['table', ['table']],
      ['insert', ['link', 'picture', 'video']],
      ['view', ['fullscreen', 'codeview']]
    ],
    button: ['undo', 'redo'],
    onFocus: function () {},
    onBlur: function () {},
    onChange: function () {}
  };

})(jQuery, window, document);
