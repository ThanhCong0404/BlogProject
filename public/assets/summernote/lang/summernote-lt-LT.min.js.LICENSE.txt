/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.toolbar = this.options.toolbar && $('<div>').addClass('note-toolbar').append(this.options.toolbar).html();
    this.options.dialogsInBody = this.options.dialogsInBody || this.options.airMode;

    this.$editor = this.options.airMode
      ? this.createAirEditor()
      : this.createEditor();

    this.$element.after(this.options.toolbar).after(this.$editor);

    if (this.options.dialogsInBody) {
      this.options.body = this.options.body || $('body');
      this.options.body.append(this.options.airPopover);
    }

    this.initEvents();
    this.initPopover();
    this.initCodeview();
    this.initDialogs();
    this.initImage();
    this.initVideo();
    this.initLink();
    this.initTable();
    this.initList();
    this.initMarker();
    this.initFullscreen();
    this.initAirMode();
    this.initFontsize();
    this.initFontname();
    this.initColor();
    this.initParagraph();
    this.initStrikethrough();
    this.initItalic();
    this.initBold();
    this.initUnderline();
    this.initJustifyLeft();
    this.initJustifyCenter();
    this.initJustifyRight();
    this.initJustifyFull();
    this.initHeight();
    this.initRemove();
    this.initHelp();

    this.invoke('onInit');
  };

  // other methods
  // ...

  // destroy
  Summernote.prototype.destroy = function () {
    if (this.isDestroyed) {
      return;
    }

    this.invoke('onDestroy');

    this.$editor.remove();
    this.$element.removeData('summernote').off('.summernote');

    this.isDestroyed = true;
  };

  // plugin interface
  Summernote.prototype.invoke = function (method, argument) {
    var args = Array.prototype.slice.call(arguments, 1);

    if (typeof method === 'string' && typeof this[method] === 'function') {
      return this[method].apply(this, args);
    } else {
      return this.each(function () {
        var instance = $.data(this, 'summernote');

        if (instance instanceof Summernote && typeof instance[method] === 'function') {
          instance[method].apply(instance, args);
        }
      });
    }
  };

  // add summernote method
  $.fn.summernote = function (option, ...args) {
    var methodReturn;
    var $set = this.each(function () {
      var $this = $(this);
      var options = typeof option === 'object' && option;
      var data = $this.data('summernote');
      var instance = data ? data : new Summernote(this, options);

      if (typeof option === 'string') {
        methodReturn = instance[option].apply(instance, args);
      }
    });

    // return this for chainable
    return methodReturn === undefined ? $set : methodReturn;
  };

  // default options
  $.fn.summernote.defaults = {
    // air mode options
    airMode: false,
    airPopover: [
      ['style', ['style']],
      ['font', ['bold', 'italic', 'underline', 'clear']],
      ['fontname', ['fontname']],
      ['fontsize', ['fontsize']],
      ['color', ['color']],
      ['para', ['ul', 'ol', 'paragraph']],
      ['table', ['table']],
      ['insert', ['link', 'picture', 'video']],
      ['view', ['fullscreen', 'codeview', 'help']]
    ],
    // editor options
    codemirror: {
      mode: 'text/html',
      htmlMode: true,
      lineNumbers: true,
      matchBrackets: true
    },
    // dialog options
    dialogsFade: true,
    dialogsInBody: false,
    // toolbar options
    toolbar: [
      ['style', ['style']],
      ['font', ['bold', 'italic', 'underline', 'clear']],
      ['fontname', ['fontname']],
      ['fontsize', ['fontsize']],
      ['color', ['color']],
      ['para', ['ul', 'ol', 'paragraph']],
      ['table', ['table']],
      ['insert', ['link', 'picture', 'video']],
      ['view', ['fullscreen', 'codeview', 'help']]
    ],
    // popover options
    popover: {
      air: [
        ['style', ['style']],
        ['font', ['bold', 'italic', 'underline', 'clear']],
        ['fontname', ['fontname']],
        ['fontsize', ['fontsize']],
        ['color', ['color']],
        ['para', ['ul', 'ol', 'paragraph']],
        ['table', ['table']],
        ['insert', ['link', 'picture', 'video']]
      ],
      image: [
        ['image', ['image', 'alignImage']],
        ['float', ['floatLeft', 'floatRight', 'floatNone']],
        ['remove', ['removeMedia']]
      ],
      link: [
        ['link', ['linkDialogShow', 'unlink']]
      ],
      airPopoverOffset: 30
    },
    // shortcut options
    shortcuts: {
      undo: 'ctrl+z, meta+z',
      redo: 'ctrl+y, meta+y',
      fontSize: 'ctrl+[, meta+[, ctrl+], meta+]',
      fontName: 'ctrl+alt+f, meta+alt+f',
      bold: 'ctrl+b, meta+b',
      italic: 'ctrl+i, meta+i',
      underline: 'ctrl+u, meta+u',
      strike: 'ctrl+shift+x, meta+shift+x',
      removeFormat: 'ctrl+space, meta+space',
      insertOrderedList: 'ctrl+shift+7, meta+shift+7',
      insertUnorderedList: 'ctrl+shift+8, meta+shift+8',
      indent: 'ctrl+]',
      outdent: 'ctrl+[',
      justifyLeft: 'ctrl+shift+l, meta+shift+l',
      justifyCenter: 'ctrl+e, meta+e',
      justifyRight: 'ctrl+r, meta+r',
      justifyFull: 'ctrl+shift+j, meta+shift+j',
      lineHeight: 'ctrl+shift+p, meta+shift+p',
      paragraphStyle: 'ctrl+shift+s, meta+shift+s',
      codeview: 'ctrl+shift+v, meta+shift+v',
      help: 'f1',
      fullscreen: 'f11',
      maximize: 'ctrl+shift+=, meta+shift+=',
      minimize: 'ctrl+shift+-, meta+shift+-'
    },
    // callbacks
    callbacks: {
      onInit: function () {},
      onFocus: function () {},
      onBlur: function () {},
      onImageUpload: function (files) {},
      onImageUploadError: function (files, xhr, status, errMsg) {},
      onMediaDelete: function (target) {},
      onPaste: function (e) {},
      onKeyup: function (e) {},
      onKeydown: function (e) {},
      onMouseup: function (e) {},
      onMousemove: function (e) {},
      onDrop: function (e) {},
      onDialogShown: function (dialog) {},
      onDialogHidden: function (dialog) {},
      onDialogSubmit: function (dialog) {},
      onDialogCancel: function (dialog) {}
    }
  };

  // initialize
  $(document).ready(function () {
    $('[data-provide="summernote"]').summernote();
  });

})(jQuery, window, document);
