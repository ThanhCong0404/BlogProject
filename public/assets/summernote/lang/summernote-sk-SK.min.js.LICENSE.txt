/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = $.fn.summernote.lang[this.options.lang];
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.height = this.getRealHeight(this.options.height);
    this.$editable = this.$element.is('textarea') ? this.$element : this.$element.find('textarea');
    this.$editor = this.createEditor();
    this.$editor.appendTo(this.$element);
    this.$fontsize = this.createFontsize();
    this.$fontsize.appendTo(this.$element);
    this.$fontname = this.createFontname();
    this.$fontname.appendTo(this.$element);
    this.$color = this.createColor();
    this.$color.appendTo(this.$element);
    this.$paragraph = this.createParagraph();
    this.$paragraph.appendTo(this.$element);
    this.$style = this.createStyle();
    this.$style.appendTo(this.$element);
    this.$stylestatus = this.createStylestatus();
    this.$stylestatus.appendTo(this.$element);
    this.$bold = this.createBold();
    this.$bold.appendTo(this.$element);
    this.$italic = this.createItalic();
    this.$italic.appendTo(this.$element);
    this.$underline = this.createUnderline();
    this.$underline.appendTo(this.$element);
    this.$strikethrough = this.createStrikethrough();
    this.$strikethrough.appendTo(this.$element);
    this.$superscript = this.createSuperscript();
    this.$superscript.appendTo(this.$element);
    this.$subscript = this.createSubscript();
    this.$subscript.appendTo(this.$element);
    this.$remove = this.createRemove();
    this.$remove.appendTo(this.$element);
    this.$ul = this.createUl();
    this.$ul.appendTo(this.$element);
    this.$ol = this.createOl();
    this.$ol.appendTo(this.$element);
    this.$link = this.createLink();
    this.$link.appendTo(this.$element);
    this.$table = this.createTable();
    this.$table.appendTo(this.$element);
    this.$hr = this.createHr();
    this.$hr.appendTo(this.$element);
    this.$picture = this.createPicture();
    this.$picture.appendTo(this.$element);
    this.$video = this.createVideo();
    this.$video.appendTo(this.$element);
    this.$audio = this.createAudio();
    this.$audio.appendTo(this.$element);
    this.$fullscreen = this.createFullscreen();
    this.$fullscreen.appendTo(this.$element);
    this.$airpalette = this.createAirpalette();
    this.$airpalette.appendTo(this.$element);
    this.$airpalette.hide();
    this.$airpalettepicker = this.createAirpalettepicker();
    this.$airpalettepicker.appendTo(this.$element);
    this.$airpalettepicker.hide();
    this.$airpalettepickerinput = this.$airpalettepicker.find('input');
    this.$airpalettepickerinput.spectrum({
      color: '#000',
      preferredFormat: 'hex',
      showInput: true,
      showAlpha: true,
      move: function (color) {
        this.$airpalettepickerinput.val(color.toHexString());
      }.bind(this),
      show: function () {
        this.$airpalettepicker.show();
      }.bind(this),
      hide: function () {
        this.$airpalettepicker.hide();
      }.bind(this),
      change: function (color) {
        this.invoke('color', color.toHexString());
      }.bind(this)
    });
    this.$airpalettepickerinput.val('#000');
    this.$airpalettepickerinput.spectrum('set', '#000');
    this.$airpalettepickerinput.on('blur', function () {
      this.$airpalettepicker.hide();
    }.bind(this));
    this.$airpalette.on('click', function () {
      this.$airpalettepicker.show();
    }.bind(this));
    this.$element.on('click', function (e) {
      if (!$(e.target).closest('.note-palette').length) {
        this.$airpalettepicker.hide();
      }
    }.bind(this));
    this.$element.on('summernote.keyup summernote.change', function () {
      this.updateToolbar();
    }.bind(this));
    this.updateToolbar();
    this.invoke('init');
  };

  // other methods
  // ...

  // add summernote method
  $.fn.summernote = function (option, value) {
    return this.each(function () {
      var $this = $(this);
      var data = $this.data('summernote');
      var options = typeof option === 'object' && option;
      if (!data) {
        $this.data('summernote', (data = new Summernote(this, options)));
      }
      if (typeof option === 'string') {
        data[option](value);
      }
    });
  };

  // initialize summernote
  $.fn.summernote.construct = Summernote;

  // summernote default options
  $.fn.summernote.defaults = {
    // ...
  };

  // summernote languages
  $.fn.summernote.lang = {
    // ...
  };

  // summernote version
  $.fn.summernote.version = '0.8.18';

})(jQuery, window, document);
