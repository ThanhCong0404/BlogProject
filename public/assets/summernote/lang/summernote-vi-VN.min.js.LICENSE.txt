/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.toolbar = this.options.toolbar && $('<div>').addClass('note-toolbar').append(this.options.toolbar).html();
    this.options.dialogsInBody = this.options.dialogsInBody || this.options.airMode;

    this.$editor = this.options.airMode
      ? this.createAirEditor()
      : this.createEditor();

    this.$element.after(this.options.toolbar).after(this.$editor);

    if (this.options.dialogsInBody) {
      this.options.body = this.options.body || $('body');
      this.options.body.append(this.options.airPopover);
    }

    this.initEvents();
    this.initPopover();
    this.initCodeview();
    this.initDialogs();
    this.initImage();
    this.initVideo();
    this.initLink();
    this.initTable();
    this.initList();
    this.initMarker();
    this.initFullscreen();
    this.initAirMode();
    this.initFontsize();
    this.initFontname();
    this.initColor();
    this.initParagraph();
    this.initStrikethrough();
    this.initItalic();
    this.initBold();
    this.initUnderline();
    this.initJustifyLeft();
    this.initJustifyCenter();
    this.initJustifyRight();
    this.initJustifyFull();
    this.initHeight();
    this.initMaximize();
    this.initMinimize();
    this.initHelp();
    this.initUndo();
    this.initRedo();
    this.initRemove();
    this.initIndent();
    this.initOutdent();
    this.initCodeview();
    this.initDialogs();
    this.initImage();
    this.initVideo();
    this.initLink();
    this.initTable();
    this.initList();
    this.initMarker();
    this.initFullscreen();
    this.initAirMode();
    this.initFontsize();
    this.initFontname();
    this.initColor();
    this.initParagraph();
    this.initStrikethrough();
    this.initItalic();
    this.initBold();
    this.initUnderline();
    this.initJustifyLeft();
    this.initJustifyCenter();
    this.initJustifyRight();
    this.initJustifyFull();
    this.initHeight();
    this.initMaximize();
    this.initMinimize();
    this.initHelp();
    this.initUndo();
    this.initRedo();
    this.initRemove();
    this.initIndent();
    this.initOutdent();
    this.initCodeview();
    this.initDialogs();
    this.initImage();
    this.initVideo();
    this.initLink();
    this.initTable();
    this.initList();
    this.initMarker();
    this.initFullscreen();
    this.initAirMode();
    this.initFontsize();
    this.initFontname();
    this.initColor();
    this.initParagraph();
    this.initStrikethrough();
    this.initItalic();
    this.initBold();
    this.initUnderline();
    this.initJustifyLeft();
    this.initJustifyCenter();
    this.initJustifyRight();
    this.initJustifyFull();
    this.initHeight();
    this.initMaximize();
    this.initMinimize();
    this.initHelp();
    this.initUndo();
    this.initRedo();
    this.initRemove();
    this.initIndent();
    this.initOutdent();
  };

  // other methods
  Summernote.prototype.destroy = function () {
    this.isDestroyed = true;
    this.$editor.remove();
    this.$element.removeData('summernote');
  };

  // add summernote method
  $.fn.summernote = function (option, value) {
    return this.each(function () {
      var $this = $(this);
      var data  = $this.data('summernote');
      var options = typeof option == 'object' && option;

      if (!data) $this.data('summernote', (data = new Summernote(this, options)));
      if (typeof option == 'string') data[option](value);
    });
  };

  // default options
  $.fn.summernote.defaults = {
    // [ui]
    airMode: false,
    airPopover: [
      ['style', ['style']],
      ['font', ['bold', 'italic', 'underline', 'clear']],
      ['fontname', ['fontname']],
      ['fontsize', ['fontsize']],
      ['color', ['color']],
      ['para', ['ul', 'ol', 'paragraph']],
      ['table', ['table']],
      ['insert', ['link', 'picture', 'video']],
      ['view', ['fullscreen', 'codeview', 'help']]
    ],
    toolbar: [
      ['style', ['style']],
      ['font', ['bold', 'italic', 'underline', 'clear']],
      ['fontname', ['fontname']],
      ['fontsize', ['fontsize']],
      ['color', ['color']],
      ['para', ['ul', 'ol', 'paragraph']],
      ['table', ['table']],
      ['insert', ['link', 'picture', 'video']],
      ['view', ['fullscreen', 'codeview', 'help']]
    ],
    dialogsInBody: false,
    // [layout]
    codemirror: {
      mode: 'text/html',
      htmlMode: true,
      lineNumbers: true
    },
    focus: true,
    lang: 'en-US',
    // [font-style]
    fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',
      'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma',
      'Times New Roman', 'Verdana'],
    fontNamesIgnoreCheck: ['Arial'],
    fontSizeUnits: ['px', 'pt', 'em', 'rem', 'percent'],
    // [height]
    height: 300,
    minHeight: null,
    maxHeight: null,
    // [dialog]
    popover: {
      air: [
        ['style', ['style']],
        ['font', ['bold', 'italic', 'underline', 'clear']],
        ['fontname', ['fontname']],
        ['fontsize', ['fontsize']],
        ['color', ['color']],
        ['para', ['ul', 'ol', 'paragraph']],
        ['table', ['table']],
        ['insert', ['link', 'picture', 'video']],
        ['view', ['fullscreen', 'codeview', 'help']]
      ],
      image: [
        ['style', ['style']],
        ['font', ['bold', 'italic', 'underline', 'clear']],
        ['fontname', ['fontname']],
        ['fontsize', ['fontsize']],
        ['color', ['color']],
        ['para', ['ul', 'ol', 'paragraph']],
        ['table', ['table']],
        ['view', ['fullscreen', 'codeview', 'help']]
      ],
      link: [
        ['link', ['linkDialogShow', 'unlink']]
      ],
      airPopoverOffset: 10
    },
    // [events]
    callbacks: {
      onChange: function (contents, $editable) {
      },
      onImageUpload: function (files) {
      },
      onMediaDelete: function (target) {
      },
      onPaste: function (e) {
      },
      onFocus: function (e) {
      },
      onBlur: function (e) {
      },
      onInit: function () {
      }
    }
  };

  // summernote jQuery plugin
  $(function () {
    $('[data-provide="summernote"]').each(function () {
      $(this).summernote();
    });
  });

})(jQuery, window, document);
