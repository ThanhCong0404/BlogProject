/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = $.fn.summernote.lang[this.options.lang];
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode || false;
    this.options.dialogsInBody = this.options.dialogsInBody || false;
    this.options.toolbar = this.options.toolbar || [];
    this.options.popover = this.options.popover || [];
    this.options.height = this.options.height || 300;
    this.options.minHeight = null;
    this.options.maxHeight = null;
    this.options.focus = this.options.focus || false;
    this.options.codemirror = this.options.codemirror || {};
    this.options.codemirror.mode = this.options.codemirror.mode || 'text/html';
    this.options.codemirror.theme = this.options.codemirror.theme || 'monokai';
    this.options.disableDragAndDrop = this.options.disableDragAndDrop || false;
    this.options.disableGestures = this.options.disableGestures || false;
    this.options.disableResize = this.options.disableResize || false;
    this.options.focusCallback = this.options.focusCallback || function () {};
    this.options.fontNames = this.options.fontNames || [
      'Arial', 'Arial Black', 'Comic Sans MS', 'Courier New',
      'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande',
      'Lucida Sans Unicode', 'MS Sans Serif', 'Tahoma', 'Times New Roman',
      'Verdana'
    ];
    this.options.fontSizes = this.options.fontSizes || ['8', '9', '10', '11', '12', '14', '18', '24', '36', '48', '64', '72'];
    this.options.styleWithSpan = this.options.styleWithSpan || false;
    this.options.styleTags = this.options.styleTags || ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
    this.options.buttons = this.options.buttons || {};
    this.options.buttons.font = this.options.buttons.font || ['bold', 'italic', 'underline', 'clear'];
    this.options.buttons.fontsize = this.options.buttons.fontsize || ['fontsize'];
    this.options.buttons.color = this.options.buttons.color || ['color'];
    this.options.buttons.para = this.options.buttons.para || ['ul', 'ol', 'paragraph'];
    this.options.buttons.table = this.options.buttons.table || ['table', 'hr'];
    this.options.buttons.insert = this.options.buttons.insert || ['link', 'picture', 'video'];
    this.options.buttons.view = this.options.buttons.view || ['fullscreen', 'codeview'];
    this.options.buttons.help = this.options.buttons.help || ['help'];
    this.options.fontSizes = this.options.fontSizes.map(function (value) {
      return parseInt(value, 10);
    });

    this.$editor = this.createEditor();
    this.$editor.appendTo(this.$element);

    this.initEvents();
    this.initPopover();
    this.initCodeview();
    this.initFullscreen();
    this.initFontsize();
    this.initColor();
    this.initLink();
    this.initPicture();
    this.initVideo();
    this.initTable();
    this.initParagraph();
    this.initHelp();

    this.setHeight();
    this.setFontSize();
    this.setLang();
    this.setCodeviewTheme();

    if (this.options.focus) {
      this.focus();
      this.options.focusCallback();
    }
  };

  // create editor
  Summernote.prototype.createEditor = function () {
    var $editor = $('<div class="note-editor note-frame panel panel-default"/>');
    var $editorContainer = $('<div class="note-inner"/>');
    var $editable = $('<div class="note-editable panel-body"/>');
    var $editableContainer = $('<div class="note-editable-container"/>');
    var $editableWrapper = $('<div class="note-editable-wrapper"/>');
    var $resizeBar = $('<div class="note-resizebar"/>');

    $resizeBar.appendTo($editableWrapper);
    $editable.appendTo($editableContainer);
    $editableContainer.appendTo($editableWrapper);
    $editableWrapper.appendTo($editable);
    $editable.appendTo($editableContainer);
    $editableContainer.appendTo($editorContainer);
    $editorContainer.appendTo($editor);

    return $editor;
  };

  // initialize events
  Summernote.prototype.initEvents = function () {
    this.$editor.on('mousedown', $.proxy(this.onMouseDown, this));
    this.$editor.on('mouseup', $.proxy(this.onMouseUp, this));
    this.$editor.on('mousemove', $.proxy(this.onMouseMove, this));
    this.$editor.on('click', $.proxy(this.onClick, this));
    this.$editor.on('dblclick', $.proxy(this.onDblClick, this));
    this.$editor.on('contextmenu', $.proxy(this.onContextMenu, this));
    this.$editor.on('paste', $.proxy(this.onPaste, this));
    this.$editor.on('input propertychange', $.proxy(this.onInput, this));
    this.$editor.on('focus', $.proxy(this.onFocus, this));
    this.$editor.on('blur', $.proxy(this.onBlur, this));
    this.$editor.on('keydown', $.proxy(this.onKeyDown, this));
    this.$editor.on('keyup', $.proxy(this.onKeyUp, this));
    this.$editor.on('drop', $.proxy(this.onDrop, this));
    this.$editor.on('dragover', $.proxy(this.onDragOver, this));

    $(document).on('mouseup', $.proxy(this.onDocumentMouseUp, this));
  };

  // initialize popover
  Summernote.prototype.initPopover = function () {
    this.popover = new Popover(this);
  };

  // initialize codeview
  Summernote.prototype.initCodeview = function () {
    this.codeview = new Codeview(this);
  };

  // initialize fullscreen
  Summernote.prototype.initFullscreen = function () {
    this.fullscreen = new Fullscreen(this);
  };

  // initialize fontsize
  Summernote.prototype.initFontsize = function () {
    this.fontsize = new Fontsize(this);
  };

  // initialize color
  Summernote.prototype.initColor = function () {
    this.color = new Color(this);
  };

  // initialize link
  Summernote.prototype.initLink = function () {
    this.link = new Link(this);
  };

  // initialize picture
  Summernote.prototype.initPicture = function () {
    this.picture = new Picture(this);
  };

  // initialize video
  Summernote.prototype.initVideo = function () {
    this.video = new Video(this);
  };

  // initialize table
  Summernote.prototype.initTable = function () {
    this.table = new Table(this);
  };

  // initialize paragraph
  Summernote.prototype.initParagraph = function () {
    this.paragraph = new Paragraph(this);
  };

  // initialize help
  Summernote.prototype.initHelp = function () {
    this.help = new Help(this);
  };

  // destroy
  Summernote.prototype.destroy = function () {
    if (this.isDestroyed) {
      return;
    }

    this.isDestroyed = true;

    this.$element.removeData('summernote');
    this.$editor.remove();

    $(document).off('mouseup', this.onDocumentMouseUp);
  };

  // set height
  Summernote.prototype.setHeight = function () {
    var height = this.options.height;

    if (this.options.minHeight) {
      height = Math.max(height, this.options.minHeight);
    }

    if (this.options.maxHeight) {
      height = Math.min(height, this.options.maxHeight);
    }

    this.$editor.css('height', height);
  };

  // set font size
  Summernote.prototype.setFontSize = function () {
    if (this.options.fontSize) {
      this.$editable.css('font-size', this.options.fontSize);
    }
  };

  // set language
  Summernote.prototype.setLang = function () {
    this.$editor.attr('data-local', this.options.lang);
  };

  // set codemirror theme
  Summernote.prototype.setCodeviewTheme = function () {
    if (this.codeview) {
      this.codeview.setTheme(this.options.codemirror.theme);
    }
  };

  // focus
  Summernote.prototype.focus = function () {
    this.$editable.focus();
  };

  // blur
  Summernote.prototype.blur = function () {
    this.$editable.blur();
  };

  // on mouse down
  Summernote.prototype.onMouseDown = function (event) {
    this.popover.hide();
    this.codeview.hide();
    this.fullscreen.hide();

    this.editable.onMouseDown(event);
  };

  // on mouse up
  Summernote.prototype.onMouseUp = function (event) {
    this.editable.onMouseUp(event);
  };

  // on mouse move
  Summernote.prototype.onMouseMove = function (event) {
    this.editable.onMouseMove(event);
  };

  // on click
  Summernote.prototype.onClick = function (event) {
    this.editable.onClick(event);
  };

  // on double click
  Summernote.prototype.onDblClick = function (event) {
    this.editable.onDblClick(event);
  };

  // on context menu
  Summernote.prototype.onContextMenu = function (event) {
    this.editable.onContextMenu(event);
  };

  // on paste
  Summernote.prototype.onPaste = function (event) {
    this.editable.onPaste(event);
  };

  // on input
  Summernote.prototype.onInput = function (event) {
    this.editable.onInput(event);
  };

  // on focus
  Summernote.prototype.onFocus = function (event) {
    this.editable.onFocus(event);
  };

  // on blur
  Summernote.prototype.onBlur = function (event) {
    this.editable.onBlur(event);
  };

  // on key down
  Summernote.prototype.onKeyDown = function (event
