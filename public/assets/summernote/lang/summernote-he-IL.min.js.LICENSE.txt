/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.toolbar = this.options.toolbar && $('<div>').addClass('note-toolbar').append(this.options.toolbar).remove().html();
    this.options.dialogsInBody = this.options.dialogsInBody || this.options.airMode;

    this.$editor = this.options.airMode
      ? this.$element
      : this.$element.is('textarea')
        ? this.$element
        : $('<textarea>').appendTo(this.$element);

    this.$editor.val(this.$element.val() || '');

    this.id = 'summernote-' + (++$.summernote.counter);
    this.$container = $('<div>').addClass('note-container').attr('id', this.id).appendTo(this.$element);
    this.$editor.addClass('note-editable').attr('id', this.id + '-editor').appendTo(this.$container);

    this.fontSize = this.options.fontSize || ['8', '9', '10', '11', '12', '14', '16', '18', '20', '22', '24', '26', '28', '30', '36', '48', '56', '72'];
    this.fontNames = this.options.fontNames || ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Impact', 'Lucida Console', 'Lucida Sans Unicode', 'Tahoma', 'Times New Roman', 'Verdana'];
    this.fontNamesExt = this.options.fontNamesExt || [];
    this.fontNames = this.fontNames.concat(this.fontNamesExt);

    this.initLayout();
    this.initEvents();
    this.initPopover();
    this.initCodeview();
    this.initDialog();
    this.initImage();
    this.initVideo();
    this.initLink();
    this.initTable();
    this.initList();
    this.initParagraph();
    this.initFullscreen();
    this.initAirMode();
    this.initButtonStatus();
    this.initKeyMap();

    if (this.options.focus) {
      this.focus();
    }
  };

  // initialize layout
  Summernote.prototype.initLayout = function () {
    this.$fontsize = $('<select>').appendTo(this.$toolbar).addClass('note-fontsize-menu').attr('tabindex', -1).html(this.getFontSizeMenu());
    this.$fontname = $('<select>').appendTo(this.$toolbar).addClass('note-fontname-menu').attr('tabindex', -1).html(this.getFontNameMenu());
    this.$bold = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn btn-bold').attr('data-method', 'bold').html('<i class="note-icon-bold"></i>').attr('tabindex', -1);
    this.$italic = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn btn-italic').attr('data-method', 'italic').html('<i class="note-icon-italic"></i>').attr('tabindex', -1);
    this.$strikethrough = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn btn-strikethrough').attr('data-method', 'strikethrough').html('<i class="note-icon-strikethrough"></i>').attr('tabindex', -1);
    this.$underline = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn btn-underline').attr('data-method', 'underline').html('<i class="note-icon-underline"></i>').attr('tabindex', -1);
    this.$removeFormat = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn').attr('data-method', 'removeFormat').html('<i class="note-icon-remove-format"></i>').attr('tabindex', -1);
    this.$superscript = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn btn-superscript').attr('data-method', 'superscript').html('<i class="note-icon-superscript"></i>').attr('tabindex', -1);
    this.$subscript = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn btn-subscript').attr('data-method', 'subscript').html('<i class="note-icon-subscript"></i>').attr('tabindex', -1);
    this.$paragraph = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn dropdown-toggle').attr('data-toggle', 'dropdown').html('<i class="note-icon-paragraph"></i>').attr('tabindex', -1);
    this.$paragraphMenu = $('<ul>').addClass('dropdown-menu note-paragraph-menu').appendTo(this.$paragraph);
    this.$paragraphList = this.getParagraphList();
    this.$paragraphList.each(function () {
      $('<li>').appendTo(this.$paragraphMenu).append($(this).data('menu'));
    }.bind(this));
    this.$paragraph.append('<span class="caret"></span>');
    this.$paragraphMenu.on('mousedown', function (e) {
      e.preventDefault();
    });
    this.$paragraph.on('shown.bs.dropdown', function () {
      this.$paragraphMenu.children().first().focus();
    }.bind(this));
    this.$paragraph.on('hidden.bs.dropdown', function () {
      this.$paragraph.find('button').focus();
    }.bind(this));
    this.$lineHeight = $('<select>').appendTo(this.$toolbar).addClass('note-btn btn').attr('tabindex', -1).html(this.getLineHeightMenu());
    this.$height = $('<input>').appendTo(this.$toolbar).addClass('note-btn btn').attr('type', 'number').attr('min', '1').attr('max', '100').attr('tabindex', -1).val(this.options.height);
    this.$codeview = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn').attr('data-method', 'codeview').html('<i class="note-icon-codeview"></i>').attr('tabindex', -1);
    this.$undo = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn').attr('data-method', 'undo').html('<i class="note-icon-undo"></i>').attr('tabindex', -1);
    this.$redo = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn').attr('data-method', 'redo').html('<i class="note-icon-redo"></i>').attr('tabindex', -1);
    this.$help = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn').attr('data-method', 'help').html('<i class="note-icon-help"></i>').attr('tabindex', -1);
    this.$fullscreen = $('<button>').appendTo(this.$toolbar).addClass('note-btn btn').attr('data-method', 'fullscreen').html('<i class="note-icon-expand"></i>').attr('tabindex', -1);
    this.$airPalette = $('<div>').addClass('note-air-palette').appendTo(this.$container);
    this.$airIcon = $('<div>').addClass('note-air-icon').appendTo(this.$airPalette);
    this.$airColorpicker = $('<div>').addClass('note-colorpicker').appendTo(this.$airPalette);
    this.$airColorpicker.colorpicker();
    this.$airColorpicker.on('changeColor', function (e) {
      this.invoke('color', e.color.toHex());
    }.bind(this));
    this.$airColorpicker.on('hidePicker', function (e) {
      this.$airPalette.removeClass('note-colorpicker-active');
    }.bind(this));
    this.$airColorpicker.on('showPicker', function (e) {
      this.$airPalette.addClass('note-colorpicker-active');
    }.bind(this));
    this.$airColorpicker.on('create', function (e) {
      this.$airPalette.addClass('note-colorpicker-active');
    }.bind(this));
    this.$airColorpicker.on('destroy', function (e) {
      this.$airPalette.removeClass('note-colorpicker-active');
    }.bind(this));
    this.$airColorpicker.colorpicker('setValue', this.options.airColor);
    this.$airColorpicker.data('colorpicker').hide();
    this.$airPalette.on('mousedown', function (e) {
      e.preventDefault();
    });
    this.$airPalette.on('mouseup', function (e) {
      this.$airColorpicker.data('colorpicker').show();
    }.bind(this));
    this.$airPalette.on('mouseleave', function (e) {
      this.$airColorpicker.data('colorpicker').hide();
    }.bind(this));
    this.$airPalette.on('click', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('mouseenter', function (e) {
      this.$airPalette.addClass('note-air-palette-active');
    }.bind(this));
    this.$airPalette.on('mouseleave', function (e) {
      this.$airPalette.removeClass('note-air-palette-active');
    }.bind(this));
    this.$airPalette.on('click', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('dblclick', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('contextmenu', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('focus', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('blur', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('selectstart', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('dragstart', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('keydown', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('keypress', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('keyup', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('cut', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('copy', function (e) {
      e.preventDefault();
    }.bind(this));
    this.$airPalette.on('paste', function (e) {
      e.preventDefault();
    }.bind(this));

