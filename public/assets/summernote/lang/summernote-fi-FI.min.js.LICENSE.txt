/*
Summernote v0.8.18
(c) 2013-2023 Alan Hong and other contributors
MIT License
https://github.com/summernote/summernote/blob/develop/LICENSE.md
*/

;(function ($, window, document, undefined) {
  'use strict';

  // define summernote namespace
  var Summernote = function (element, options) {
    this.$element = $(element);
    this.options = $.extend({}, $.fn.summernote.defaults, options);
    this.lang = this.options.lang;
    this.isDestroyed = false;
    this.init();
  };

  // initialize
  Summernote.prototype.init = function () {
    this.options.airMode = this.options.airMode && this.$element.parent().hasClass('note-air-frame');
    this.options.dialogsInBody = this.options.dialogsInBody && !this.options.airMode;
    this.options.toolbar = this.options.toolbar && $('<div>').addClass('note-toolbar').append(this.options.toolbar).remove().html();
    this.options.button = this.options.button && $('<button>').addClass('note-btn').append(this.options.button).remove().html();

    this.$editor = this.options.dialogsInBody
      ? $('<div>').addClass('note-editor note-frame-container').appendTo('body')
      : $('<div>').addClass('note-editor').appendTo(this.$element);

    this.$editable = this.options.airMode
      ? $('<div>').addClass('note-editable panel-body').appendTo(this.$editor)
      : $('<textarea>').addClass('note-editable').appendTo(this.$editable);

    this.$editor.append(this.options.toolbar);

    this.$fontname = this.options.fontNames && $('<select>').addClass('note-fontname').appendTo(this.$editor);
    this.$fontsize = this.options.fontSizes && $('<select>').addClass('note-fontsize').appendTo(this.$editor);
    this.$color = this.options.colors && $('<input>').addClass('note-colorpicker').appendTo(this.$editor);
    this.$bold = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-font-weight-button note-bold').appendTo(this.$editor);
    this.$italic = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-font-style-button note-italic').appendTo(this.$editor);
    this.$underline = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-font-decoration-button note-underline').appendTo(this.$editor);
    this.$strikethrough = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-font-decoration-button note-strikethrough').appendTo(this.$editor);
    this.$superscript = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-superscript').appendTo(this.$editor);
    this.$subscript = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-subscript').appendTo(this.$editor);
    this.$paragraph = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-paragraph').appendTo(this.$editor);
    this.$hr = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-horizontal-rule').appendTo(this.$editor);
    this.$link = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-link').appendTo(this.$editor);
    this.$unlink = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-unlink').appendTo(this.$editor);
    this.$image = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-image').appendTo(this.$editor);
    this.$video = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-video').appendTo(this.$editor);
    this.$table = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-table').appendTo(this.$editor);
    this.$ul = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-unordered-list').appendTo(this.$editor);
    this.$ol = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-ordered-list').appendTo(this.$editor);
    this.$code = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-code').appendTo(this.$editor);
    this.$quote = this.options.buttons && $('<button>').addClass('note-btn note-btn-icon note-blockquote').appendTo(this.$editor);

    this.$fontname.append('<option value="">' + this.lang['fontname'] + '</option>');
    this.options.fontNames.forEach(function (font) {
      this.$fontname.append('<option value="' + font + '">' + font + '</option>');
    }.bind(this));

    this.$fontsize.append('<option value="">' + this.lang['fontsize'] + '</option>');
    this.options.fontSizes.forEach(function (size) {
      this.$fontsize.append('<option value="' + size + '">' + size + '</option>');
    }.bind(this));

    this.$color.spectrum({
      showInput: true,
      showAlpha: true,
      className: 'note-colorpicker',
      preferredFormat: 'hex',
      showInitial: true,
      showPalette: true,
      showSelectionPalette: true,
      maxPaletteSize: 10,
      palette: this.options.colors,
      localize: this.options.localize
    });

    this.$editable.on('focus', function () {
      this.options.focusCallback && this.options.focusCallback();
    }.bind(this));

    this.$editable.on('blur', function () {
      this.options.blurCallback && this.options.blurCallback();
    }.bind(this));

    this.$editable.on('input propertychange', function () {
      this.options.changeCallback && this.options.changeCallback();
    }.bind(this));

    this.$editable.on('scroll', function () {
      this.$editor.scrollTop(this.$editable.scrollTop());
    }.bind(this));

    this.$editable.on('paste', function (e) {
      this.options.pasteCallback && this.options.pasteCallback(e);
    }.bind(this));

    this.$editable.on('keydown', function (e) {
      this.options.keydownCallback && this.options.keydownCallback(e);
    }.bind(this));

    this.$editable.on('keyup', function (e) {
      this.options.keyupCallback && this.options.keyupCallback(e);
    }.bind(this));

    this.$editable.on('mousedown', function (e) {
      this.options.mousedownCallback && this.options.mousedownCallback(e);
    }.bind(this));

    this.$editable.on('mouseup', function (e) {
      this.options.mouseupCallback && this.options.mouseupCallback(e);
    }.bind(this));

    this.$editable.on('click', function (e) {
      this.options.clickCallback && this.options.clickCallback(e);
    }.bind(this));

    this.$editable.on('dblclick', function (e) {
      this.options.dblclickCallback && this.options.dblclickCallback(e);
    }.bind(this));

    this.$editable.on('contextmenu', function (e) {
      this.options.contextmenuCallback && this.options.contextmenuCallback(e);
    }.bind(this));

    this.$editable.on('focusin', function (e) {
      this.options.focusinCallback && this.options.focusinCallback(e);
    }.bind(this));

    this.$editable.on('focusout', function (e) {
      this.options.focusoutCallback && this.options.focusoutCallback(e);
    }.bind(this));

    this.$editable.on('cut', function (e) {
      this.options.cutCallback && this.options.cutCallback(e);
    }.bind(this));

    this.$editable.on('copy', function (e) {
      this.options.copyCallback && this.options.copyCallback(e);
    }.bind(this));

    this.$editable.on('paste', function (e) {
      this.options.pasteCallback && this.options.pasteCallback(e);
    }.bind(this));

    this.$editable.on('drop', function (e) {
      this.options.dropCallback && this.options.dropCallback(e);
    }.bind(this));

    this.$editable.on('dragover', function (e) {
      this.options.dragoverCallback && this.options.dragoverCallback(e);
    }.bind(this));

    this.$editable.on('dragenter', function (e) {
      this.options.dragenterCallback && this.options.dragenterCallback(e);
    }.bind(this));

    this.$editable.on('dragleave', function (e) {
      this.options.dragleaveCallback && this.options.dragleaveCallback(e);
    }.bind(this));

    this.$editable.on('dragstart', function (e) {
      this.options.dragstartCallback && this.options.dragstartCallback(e);
    }.bind(this));

    this.$editable.on('dragend', function (e) {
      this.options.dragendCallback && this.options.dragendCallback(e);
    }.bind(this));

    this.$editable.on('drop', function (e) {
      this.options.dropCallback && this.options.dropCallback(e);
    }.bind(this));

    this.$editable.on('dragover', function (e) {
      this.options.dragoverCallback && this.options.dragoverCallback(e);
    }.bind(this));

    this.$editable.on('dragenter', function (e) {
      this.options.dragenterCallback && this.options.dragenterCallback(e);
    }.bind(this));

    this.$editable.on('dragleave', function (e) {
      this.options.dragleaveCallback && this.options.dragleaveCallback(e);
    }.bind(this));

    this.$editable.on('dragstart', function (e) {
      this.options.dragstartCallback && this.options.dragstartCallback(e);
    }.bind(this));

    this.$editable.on('dragend', function (e) {
      this.options.dragendCallback && this.options.dragendCallback(e);
    }.bind(this));

    this.$editable.on('drop', function (e) {
      this.options.dropCallback && this.options.dropCallback(e);
    }.bind(this));

    this.$editable.on('dragover', function (e) {
      this.options.dragoverCallback && this.options.dragoverCallback(e);
    }.bind(this));

    this.$editable.on('dragenter', function (e) {
      this.options.dragenterCallback && this.options.dragenterCallback(e);
    }.bind(this));

    this.$editable.on('dragleave', function (
